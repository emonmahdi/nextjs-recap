✅ What is a Layout?
A layout is a UI structure shared across multiple pages, such as a header, sidebar, or footer. It is stateful and preserved between navigations.

✅ Why use Layouts?
Avoid repeating common UI elements.

Improve performance by reusing static layout parts.

Keep global state (e.g., user auth, theme toggle) intact.

app/
├── layout.tsx     ✅ Shared layout
├── page.tsx       ✅ Homepage
├── about/
│   └── page.tsx   ✅ About page

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <header>🌐 Site Header</header>
        <main>{children}</main>
        <footer>📍 Footer</footer>
      </body>
    </html>
  );
}


✅ What is a Template?
A template is like a layout but is not persistent. It re-renders on every navigation, useful when pages should not share state.

✅ Why use Templates?
Useful for modals, dynamic dashboards, or onboarding flows.

When you want to reset state on navigation.

Improves flexibility when layout reuse is not desired.

app/
├── dashboard/
│   ├── template.tsx   ✅ Unique template for dashboard
│   └── page.tsx


export default function DashboardTemplate({ children }: { children: React.ReactNode }) {
  console.log('Dashboard template rendered');

  return (
    <div style={{ border: '2px solid green', padding: '10px' }}>
      <h2>Dashboard Wrapper</h2>
      {children}
    </div>
  );
}

----------------------------
error.tsx – Route-level Error Handling
-----------------------------
✅ Why use error.tsx?
It allows you to handle errors locally, scoped to a specific route (e.g., /dashboard, /profile), without affecting the whole app.

app/
├── dashboard/
│   ├── error.tsx   ✅ Local error handler
│   └── page.tsx


📄 app/dashboard/error.tsx:

'use client';

export default function DashboardError({ error, reset }: { error: Error; reset: () => void }) {
  return (
    <div style={{ color: 'red' }}>
      <h2>Something went wrong in Dashboard!</h2>
      <p>{error.message}</p>
      <button onClick={() => reset()}>Try again</button>
    </div>
  );
}


📄 app/dashboard/page.tsx:

'use client';

export default function DashboardPage() {
  throw new Error('This is a dashboard-specific error!');
  return <h1>Dashboard</h1>
}


https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary

---------------------------
global-error.tsx – App-level Error Handling 
---------------------------

✅ Why use global-error.tsx?
It handles unhandled or unexpected errors across the entire app that aren't scoped to a specific route (like 500s or internal crashes).

app/
├── global-error.tsx  ✅ Global error handler
├── layout.tsx
├── page.tsx


📄 app/global-error.tsx:

'use client';

export default function GlobalError({ error, reset }: { error: Error; reset: () => void }) {
  return (
    <html>
      <body style={{ color: 'darkred', textAlign: 'center' }}>
        <h1>🔥 Global Error</h1>
        <p>{error.message}</p>
        <button onClick={() => reset()}>Try Again</button>
      </body>
    </html>
  );
}


📄 Anywhere in your app (page.tsx, etc):
'use client';

export default function HomePage() {
  throw new Error('Global error triggered from home page!');
}
