✅ What is a Layout?
A layout is a UI structure shared across multiple pages, such as a header, sidebar, or footer. It is stateful and preserved between navigations.

✅ Why use Layouts?
Avoid repeating common UI elements.

Improve performance by reusing static layout parts.

Keep global state (e.g., user auth, theme toggle) intact.

app/
├── layout.tsx     ✅ Shared layout
├── page.tsx       ✅ Homepage
├── about/
│   └── page.tsx   ✅ About page

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <header>🌐 Site Header</header>
        <main>{children}</main>
        <footer>📍 Footer</footer>
      </body>
    </html>
  );
}


✅ What is a Template?
A template is like a layout but is not persistent. It re-renders on every navigation, useful when pages should not share state.

✅ Why use Templates?
Useful for modals, dynamic dashboards, or onboarding flows.

When you want to reset state on navigation.

Improves flexibility when layout reuse is not desired.

app/
├── dashboard/
│   ├── template.tsx   ✅ Unique template for dashboard
│   └── page.tsx


export default function DashboardTemplate({ children }: { children: React.ReactNode }) {
  console.log('Dashboard template rendered');

  return (
    <div style={{ border: '2px solid green', padding: '10px' }}>
      <h2>Dashboard Wrapper</h2>
      {children}
    </div>
  );
}

----------------------------
error.tsx – Route-level Error Handling
-----------------------------
✅ Why use error.tsx?
It allows you to handle errors locally, scoped to a specific route (e.g., /dashboard, /profile), without affecting the whole app.

app/
├── dashboard/
│   ├── error.tsx   ✅ Local error handler
│   └── page.tsx


📄 app/dashboard/error.tsx:

'use client';

export default function DashboardError({ error, reset }: { error: Error; reset: () => void }) {
  return (
    <div style={{ color: 'red' }}>
      <h2>Something went wrong in Dashboard!</h2>
      <p>{error.message}</p>
      <button onClick={() => reset()}>Try again</button>
    </div>
  );
}


📄 app/dashboard/page.tsx:

'use client';

export default function DashboardPage() {
  throw new Error('This is a dashboard-specific error!');
  return <h1>Dashboard</h1>
}


https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary

---------------------------
global-error.tsx – App-level Error Handling 
---------------------------

✅ Why use global-error.tsx?
It handles unhandled or unexpected errors across the entire app that aren't scoped to a specific route (like 500s or internal crashes).

app/
├── global-error.tsx  ✅ Global error handler
├── layout.tsx
├── page.tsx


📄 app/global-error.tsx:

'use client';

export default function GlobalError({ error, reset }: { error: Error; reset: () => void }) {
  return (
    <html>
      <body style={{ color: 'darkred', textAlign: 'center' }}>
        <h1>🔥 Global Error</h1>
        <p>{error.message}</p>
        <button onClick={() => reset()}>Try Again</button>
      </body>
    </html>
  );
}


📄 Anywhere in your app (page.tsx, etc):
'use client';

export default function HomePage() {
  throw new Error('Global error triggered from home page!');
}


---------------------
Parallel Routing explained
------------------------
✅ 1. What is a Parallel Route?

Parallel Routes allow multiple pages or layouts to be rendered at the same time in different parts of a web page, without replacing each other. Each route renders independently in its own UI region.

Parallel Routes আপনাকে একই লেআউটের মধ্যে একাধিক পেজ একসাথে বা নির্দিষ্ট শর্তে রেন্ডার করার সুযোগ দেয়। এটি অ্যাপের খুবই ডায়নামিক অংশগুলোর জন্য বিশেষভাবে উপযোগী, যেমন ড্যাশবোর্ড বা সোশ্যাল সাইটের ফিড ইত্যাদি।

2. Why Use Parallel Routes?

  - You want to display multiple route-based UI areas simultaneously (e.g., sidebar + chat + main content). 
  - You need nested UI sections controlled by different parts of the URL or state.
  - You want to build multi-panel dashboards, modals, or chat apps that update independently.

3. How to use: 

Parallel routes are created using named slots. Slots are defined with the @folder convention. For example, the following file structure defines two slots: @analytics and @team:

  Q1: What are parallel routes, and how do they differ from nested routes?
Answer: Parallel routes allow rendering multiple route-based components side-by-side independently. Nested routes are hierarchical — child routes render inside parent routes.

Q2: Give a use case where parallel routes are useful.
Answer: A messaging app: you can keep the inbox visible while navigating through different chat threads without replacing the whole UI.

Q3: How do parallel routes improve performance?
Answer: They avoid unnecessary re-renders or reloads of unrelated parts of the UI by isolating updates.

Q4: How are parallel routes implemented in Next.js 15 App Router?
Answer: Using @slot folders like @chat, @dashboard and rendering them through layout props.


-------------------------
Handling unmatched  Routes
--------------------------

You can define a default.js file to render as a fallback for unmatched slots during the initial load or full-page reload.

Unmatched routes (also known as 404 routes) are URLs that don’t match any existing file or route pattern defined in your Next.js app/ or pages/ directory.

When navigating to /settings, the @team slot will render the /settings page while maintaining the currently active page for the @analytics slot.

On refresh, Next.js will render a default.js for @analytics. If default.js doesn't exist, a 404 is rendered instead.

Additionally, since children is an implicit slot, you also need to create a default.js file to render a fallback for children when Next.js cannot recover the active state of the parent page.


- Why Handle Unmatched Routes?
    - Prevents users from landing on a broken or blank page.
    - Allows you to show a branded or informative 404 page.
    - Offers links to return home or find the correct content.

- How to Handle Unmatched Routes in Next.js 15
In Next.js App Router (app/ directory), unmatched routes are automatically handled by creating a not-found.js file.

-----------------------
Conditional Routes?
-----------------------
✅ 1. What are Conditional Routes?
Definition:
Conditional Routes in Next.js are routes that are only accessible/rendered based on certain conditions — like whether a user is authenticated, has the right role, feature flag is active, or data exists.

In simpler terms:

Conditional Routing lets you decide when and what to render based on runtime logic, even though the route physically exists.

🧠 2. Why Use Conditional Routes?
Reason	Explanation
🔐 Access Control	Protect routes from unauthorized users (auth/role-based).
🧠 Feature Flags	Show/hide features depending on configuration.
⚙️ Data-Based Rendering	Conditionally route based on API or DB state.
🧭 UX Personalization	Direct users to different pages based on their role.

🔧 3. How to Use Conditional Routes in Next.js 15
We'll use:

redirect() from next/navigation

notFound() for 404

Authentication logic in middleware or layout/page

Server-side condition (e.g., feature flag)

💼 5. Interview Questions (with Sample Answers)
Q1: What are conditional routes in Next.js?
Answer: Routes that render or redirect based on certain conditions such as user role, authentication, feature flags, or data presence.

Q2: How do you protect a route in Next.js?
Answer: Use redirect() in a server component or layout to block unauthorized access, or middleware.js to handle access globally.

Q3: What is the difference between redirect and notFound in Next.js?
Answer:

redirect() moves the user to another page.

notFound() triggers the not-found.js page to simulate a 404.

Q4: How can conditional routes help in a multi-role system?
Answer: Each role (admin, user, moderator) can be conditionally directed to their own route or dashboard.